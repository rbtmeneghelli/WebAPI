// <auto-generated />
using System;
using WebAPI.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebAPI.Infra.Data.Migrations
{
    [DbContext(typeof(WebAPIContext))]
    partial class WebAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Domain.Entities.ArchiveType", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ArchiveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5284),
                            Description = "Word",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5311),
                            Description = "Excel",
                            IsActive = true
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5315),
                            Description = "Pdf",
                            IsActive = true
                        },
                        new
                        {
                            Id = 4L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5321),
                            Description = "Txt",
                            IsActive = true
                        },
                        new
                        {
                            Id = 5L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5325),
                            Description = "Jpg",
                            IsActive = true
                        },
                        new
                        {
                            Id = 6L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5329),
                            Description = "Word",
                            IsActive = true
                        },
                        new
                        {
                            Id = 7L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5333),
                            Description = "Png",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Audit", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Action_Name");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(4257))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("KeyValues")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Key_Values");

                    b.Property<string>("NewValues")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("New_Values");

                    b.Property<string>("OldValues")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Old_Values");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Table_Name");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.City", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 468, DateTimeKind.Unspecified).AddTicks(9604))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<long?>("IBGE")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("Ibge");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("City");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Client", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 462, DateTimeKind.Unspecified).AddTicks(1965))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.EmailDisplay", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<long?>("EmailTemplateId1")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasAttachment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId1");

                    b.ToTable("EmailDisplays");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Body = "Olá, {0}<br>Seja bem vindo ao <b>{1}</b><br> Utilize a senha <b>1234</b> para acessar o sistema e usufrua de todas as ferramentas disponíveis.<br>",
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5472),
                            EmailTemplateId = 1,
                            HasAttachment = false,
                            IsActive = true,
                            Priority = 1,
                            Subject = "Bem vindo ao sistema {0}",
                            Title = "Boas vindas"
                        },
                        new
                        {
                            Id = 2L,
                            Body = "<center>Olá, {0}</center><center>Conforme sua solicitação enviamos este email para que você possa concluir sua solicitação de esqueci a senha. Clique no botão abaixo.</center><br> ",
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5479),
                            EmailTemplateId = 1,
                            HasAttachment = false,
                            IsActive = true,
                            Priority = 1,
                            Subject = "{0} - Esqueci a senha",
                            Title = "Esqueci a senha"
                        },
                        new
                        {
                            Id = 3L,
                            Body = "<center>Olá, {0}</center><center>Conforme sua solicitação enviamos este email para que você possa concluir sua solicitação de troca de senha. Clique no botão abaixo.</center><br> ",
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5485),
                            EmailTemplateId = 1,
                            HasAttachment = false,
                            IsActive = true,
                            Priority = 1,
                            Subject = "{0} - Solicitação de troca de senha",
                            Title = "Troca de senha"
                        },
                        new
                        {
                            Id = 4L,
                            Body = "<center>Olá, {0}</center><center>Quero reporta-lo que a sua confirmação de senha foi realizada com sucesso no periodo das 27/03/2024 - 18:57</center><br> ",
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5708),
                            EmailTemplateId = 1,
                            HasAttachment = false,
                            IsActive = true,
                            Priority = 1,
                            Subject = "{0} - Confirmação de senha",
                            Title = "Confirmação de senha"
                        },
                        new
                        {
                            Id = 5L,
                            Body = "",
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5716),
                            EmailTemplateId = 1,
                            HasAttachment = true,
                            IsActive = true,
                            Priority = 1,
                            Subject = "{0} - Relatório",
                            Title = "Relatório"
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5391),
                            Description = "WebAPI",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.EmailType", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SmtpConfig")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5425),
                            Description = "Gmail",
                            IsActive = true,
                            SmtpConfig = "smtp.gmail.com"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5429),
                            Description = "Outlook",
                            IsActive = true,
                            SmtpConfig = "smtp.office365.com"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 487, DateTimeKind.Unspecified).AddTicks(5433),
                            Description = "Hotmail",
                            IsActive = true,
                            SmtpConfig = "smtp.live.com"
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Class");

                    b.Property<string>("MessageError")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message_Error");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Method");

                    b.Property<string>("Object")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Object");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Notification", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 471, DateTimeKind.Unspecified).AddTicks(2986))
                        .HasColumnName("Created_Time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Operation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(6787))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Operation", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(8412),
                            Description = "Auditoria",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Profile", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 478, DateTimeKind.Unspecified).AddTicks(1422))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<int>("ProfileTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Profiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(7992),
                            Description = "Perfil Usuário",
                            IsActive = true,
                            ProfileTypeId = 0
                        },
                        new
                        {
                            Id = 2L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(8006),
                            Description = "Perfil Administrador",
                            IsActive = true,
                            ProfileTypeId = 0
                        },
                        new
                        {
                            Id = 3L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(8011),
                            Description = "Perfil Manager",
                            IsActive = true,
                            ProfileTypeId = 0
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.ProfileOperation", b =>
                {
                    b.Property<long>("IdProfile")
                        .HasColumnType("bigint")
                        .HasColumnName("Id_Profile");

                    b.Property<long>("IdOperation")
                        .HasColumnType("bigint")
                        .HasColumnName("Id_Operation");

                    b.Property<bool>("CanCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanCreate");

                    b.Property<bool>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanDelete");

                    b.Property<bool>("CanExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanExport");

                    b.Property<bool>("CanImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanImport");

                    b.Property<bool>("CanResearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanResearch");

                    b.Property<bool>("CanUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("CanUpdate");

                    b.HasKey("IdProfile", "IdOperation");

                    b.HasIndex("IdOperation");

                    b.HasIndex("IdProfile", "IdOperation")
                        .IsUnique();

                    b.ToTable("ProfileOperations", (string)null);

                    b.HasData(
                        new
                        {
                            IdProfile = 1L,
                            IdOperation = 1L,
                            CanCreate = false,
                            CanDelete = false,
                            CanExport = false,
                            CanImport = false,
                            CanResearch = false,
                            CanUpdate = false
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Region", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(2679))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Initials");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Role", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<byte>("Action")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 478, DateTimeKind.Unspecified).AddTicks(2934))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<long?>("IdOperation")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("RoleTag")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdOperation");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Action = (byte)0,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(8454),
                            Description = "Regra de acesso a tela de Auditoria",
                            IsActive = false,
                            RoleTag = "ROLE_AUDIT"
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.States", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 478, DateTimeKind.Unspecified).AddTicks(7282))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Initials");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.User", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 477, DateTimeKind.Unspecified).AddTicks(8726))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<long>("IdProfile")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InicioValidade")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("InicioValidade");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsAuthenticated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Is_Authenticated");

                    b.Property<string>("LastPassword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Last_Password");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Password");

                    b.Property<DateTime>("TerminoValidade")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("TerminoValidade");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("Users", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("UsersHistory");
                                ttb
                                    .HasPeriodStart("InicioValidade")
                                    .HasColumnName("InicioValidade");
                                ttb
                                    .HasPeriodEnd("TerminoValidade")
                                    .HasColumnName("TerminoValidade");
                            }));

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedTime = new DateTime(2024, 3, 27, 18, 57, 46, 479, DateTimeKind.Unspecified).AddTicks(8514),
                            IdProfile = 1L,
                            IsActive = true,
                            IsAuthenticated = true,
                            LastPassword = "",
                            Login = "admin@DefaultAPI.com.br",
                            Password = "AQAQJwAAUz8pBGJVQXL/+A6ZfRZPGTNPDTyMBBII2Wp46uxWjSI="
                        });
                });

            modelBuilder.Entity("WebAPI.Domain.ValueObject.AddressData", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Cep");

                    b.Property<string>("Complement")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Complement");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 3, 27, 18, 57, 46, 478, DateTimeKind.Unspecified).AddTicks(9517))
                        .HasColumnName("Created_Time")
                        .HasColumnOrder(1);

                    b.Property<string>("Ddd")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ddd");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("District");

                    b.Property<string>("Gia")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Gia");

                    b.Property<string>("Ibge")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Ibge");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Is_Active")
                        .HasColumnOrder(3);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siafi")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Siafi");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Address");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("Uf");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Update_Time")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Ceps", (string)null);
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.City", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.States", "States")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .IsRequired();

                    b.Navigation("States");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("WebAPI.Domain.Entities.Address", "ClientAddress", b1 =>
                        {
                            b1.Property<long>("ClientId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Cep")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Cep");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.HasKey("ClientId");

                            b1.ToTable("ClientAddress", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("WebAPI.Domain.Entities.Document", "ClientDocument", b1 =>
                        {
                            b1.Property<long>("ClientId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Cpf")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Cpf");

                            b1.Property<string>("Rg")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Rg");

                            b1.HasKey("ClientId");

                            b1.ToTable("ClientDocument", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("ClientAddress");

                    b.Navigation("ClientDocument");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.EmailDisplay", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.EmailTemplate", "EmailTemplate")
                        .WithMany("EmailDisplays")
                        .HasForeignKey("EmailTemplateId1");

                    b.Navigation("EmailTemplate");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.ProfileOperation", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.Operation", "Operation")
                        .WithMany("ProfileOperations")
                        .HasForeignKey("IdOperation")
                        .IsRequired();

                    b.HasOne("WebAPI.Domain.Entities.Profile", "Profile")
                        .WithMany("ProfileOperations")
                        .HasForeignKey("IdProfile")
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Role", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.Operation", "Operation")
                        .WithMany("Roles")
                        .HasForeignKey("IdOperation")
                        .HasConstraintName("IdOperation");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.States", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.Region", "Region")
                        .WithMany("States")
                        .HasForeignKey("RegionId")
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("IdProfile")
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebAPI.Domain.ValueObject.AddressData", b =>
                {
                    b.HasOne("WebAPI.Domain.Entities.States", "State")
                        .WithMany("Ceps")
                        .HasForeignKey("StateId")
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.EmailTemplate", b =>
                {
                    b.Navigation("EmailDisplays");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Operation", b =>
                {
                    b.Navigation("ProfileOperations");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Profile", b =>
                {
                    b.Navigation("ProfileOperations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.Region", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("WebAPI.Domain.Entities.States", b =>
                {
                    b.Navigation("Ceps");

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
